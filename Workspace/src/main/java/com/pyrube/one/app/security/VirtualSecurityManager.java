/*******************************************************************************
 * Copyright 2019, 2023 Aranjuez Poon.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package com.pyrube.one.app.security;

import java.io.FileInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.UUID;

import com.pyrube.one.app.AppException;
import com.pyrube.one.app.Apps;
import com.pyrube.one.app.i18n.locale.AppLocaleManager;
import com.pyrube.one.app.inquiry.SearchCriteria;
import com.pyrube.one.app.logging.Logger;
import com.pyrube.one.app.memo.Note;
import com.pyrube.one.app.user.SecurityStatus;
import com.pyrube.one.app.user.User;
import com.pyrube.one.util.Dates;

/**
 * Security manager implementation
 * <pre>
 *   <manager class="com.pyrube.wea.security.WeaSecurityManagerImpl">
 *     <param name="userFile"></param>
 *     <param name="user.admin">admin123</param>
 *     <param name="user.pyrube">pyrube123</param>
 *     <param name="group.ADMIN">
 *       <param name="rights">ONE:ADM:VEW,ONE:ADM:MOD</param>
 *       <param name="users">admin</param>
 *     </param>
 *     <param name="group.USER">
 *       <param name="rights">ONE:ADM:VEW</param>
 *       <param name="users">admin,pyrube</param>
 *     </param>
 *     <param name="locale.zh_CN">
 *       <param name="users">admin,pyrube</param>
 *     </param>
 *     <param name="locale.en_US">
 *       <param name="users">usadmin,uspyrube</param>
 *     </param>
 *     <param name="timezone.Shanghai">
 *       <param name="id">Asia/Shanghai</param>
 *       <param name="users">admin,pyrube</param>
 *     </param>
 *     <param name="timezone.Newyork">
 *       <param name="id">America/New_York</param>
 *       <param name="users">usadmin,uspyrube</param>
 *     </param>
 *   </manager>
 * if userFile is provided, then load user info from the file which in following format:
 * user.admin = pwd
 * user.tony = pwd
 * group.ADMIN = \
 * 		rights=ONE:ADM:VEW,ONE:ADM:MOD \
 * 		users=admin
 * group.USER = \
 * 		rights=ONE:ADM:VEWs \
 * 		users=admin,pyrube
 * </pre>
 * 
 * @author Aranjuez
 * @since Pyrube-ONE 1.0
 */
public class VirtualSecurityManager implements SecurityManager {
	
	/**
	 * logger
	 */
	private static Logger logger = Apps.a.logger.named(VirtualSecurityManager.class.getName());
	
	public static List<User> autogeneratedUsers = new ArrayList<User>(); 
	static {
		SecurityStatus[] userStats = new SecurityStatus[] {SecurityStatus.ENABLED, SecurityStatus.LOCKED, SecurityStatus.INACTIVE, SecurityStatus.EXPIRED,
				SecurityStatus.DISABLED, SecurityStatus.PWD_EXPIRED};
		Random uRandom = new Random();
		for (int i = 0; i < 1000; i++) {
			User user = new User(UUID.randomUUID().toString(), "USER" + i);
			user.setCredentials("User" + i);
			user.setEmail("user" + i + "@pyrube.com");
			user.setStatus(userStats[uRandom.nextInt(6)]);
			autogeneratedUsers.add(user);
		}
	}
	
	/**
	 * user and password
	 */
	private Map<String, String> users = new HashMap<String, String>();
	
	/**
	 * user rights. key=user, value=rights
	 */
	private Map<String, String[]> userRights = new HashMap<String, String[]>();

	/**
	 * user groups. key=user, value=groups
	 */
	private Map<String, TreeSet<String>> userGroups = new HashMap<String, TreeSet<String>>();
	
	/**
	 * group users, key=group, value=users
	 */
	private Map<String, String[]> groupUsers = new HashMap<String, String[]>();

	/**
	 * group rights. key=group, value=rights
	 */
	private Map<String, String[]> groupRights = new HashMap<String, String[]>();
	
	/**
	 * user mobile, key=user, value=mobile
	 */
	private Map<String, String> userMobile = new HashMap<String, String>();
	
	/**
	 * user email, key=user, value=email
	 */
	private Map<String, String> userEmail = new HashMap<String, String>();
	
	/**
	 * user locale, key=user, value=locale
	 */
	private Map<String, Locale> userLocales = new HashMap<String, Locale>();
	
	/**
	 * user timezone, key=user, value=timezone
	 */
	private Map<String, TimeZone> userTimezones = new HashMap<String, TimeZone>();
	
	
	public VirtualSecurityManager() {
	}

	@Override
	public void init(Map<String, ?> params) throws AppException {
		if (params == null) throw new AppException("message.error.security.param-not-found");
		String userPrefix = "user.";
		String groupPrefix = "group.";
		String mobilePrefix = "mobile.";
		String emailPrefix = "email.";
		String localePrefix = "locale.";
		String timezonePrefix = "timezone.";
		int userPrefixLen = userPrefix.length();
		int groupPrefixLen = groupPrefix.length();
		int mobilePrefixLen = mobilePrefix.length();
		int emailPrefixLen = emailPrefix.length();
		int localePrefixLen = localePrefix.length();
		int timezonePrefixLen = timezonePrefix.length();
		
		String userFile = (String) params.get("userFile");
		if (userFile != null && userFile.length() > 0) {
			try {
				Properties props = new Properties();
				props.load(new FileInputStream(userFile));
				for (Object okey : props.keySet()) {
					String key = (String) okey;
					if (key.startsWith(userPrefix) && key.length() > userPrefixLen) {
						users.put(key.substring(userPrefixLen), props.getProperty(key)); 
					} else if (key.startsWith(groupPrefix) && key.length() > groupPrefixLen) {
						String groupName = key.substring(groupPrefixLen);
						Properties grpProps = new Properties();
						grpProps.load(new StringReader(props.getProperty(key)));
						if (grpProps.size() > 0) {
							String grpRights = grpProps.getProperty("rights");
							String grpUsers = grpProps.getProperty("users");
							if (grpUsers != null && grpUsers.length() > 0) {
								groupUsers.put(groupName, grpUsers.split(","));
								if (grpRights != null && grpRights.length() > 0) {
									groupRights.put(groupName, grpRights.split(","));
								}
							}
						}
					}
				}
			} catch (Exception e) {
				logger.error("invalid user definition file", e);
				throw new AppException("message.error.security.invalid-user-definition");
			}
		} else {
			for (String key : params.keySet()) {
				if (key.startsWith(userPrefix) && key.length() > userPrefixLen) {
					users.put(key.substring(userPrefixLen), (String) params.get(key)); 
				} else if (key.startsWith(groupPrefix) && key.length() > groupPrefixLen) {
					String groupName = key.substring(groupPrefixLen);
					Map<String, String> groupInfo = (Map<String, String>) params.get(key);
					if (groupInfo != null) {
						String grpRights = groupInfo.get("rights");
						String grpUsers = groupInfo.get("users");
						if (grpUsers != null && grpUsers.length() > 0) {
							groupUsers.put(groupName, grpUsers.split(","));
							if (grpRights != null && grpRights.length() > 0) {
								groupRights.put(groupName, grpRights.split(","));
							}
						}
					}
				} else if (key.startsWith(mobilePrefix) && key.length() > mobilePrefixLen) {
					String mobile = key.substring(mobilePrefixLen);
					Map<String, String> mobileUser = (Map<String, String>) params.get(key);
					if (mobileUser != null) {
						String user = mobileUser.get("user");
						userMobile.put(user, mobile);
					}
				} else if (key.startsWith(emailPrefix) && key.length() > emailPrefixLen) {
					String email = key.substring(emailPrefixLen);
					Map<String, String> emailUser = (Map<String, String>) params.get(key);
					if (emailUser != null) {
						String user = emailUser.get("user");
						userEmail.put(user, email);
					}
				} else if (key.startsWith(localePrefix) && key.length() > localePrefixLen) {
					String localeCode = key.substring(localePrefixLen);
					Locale locale = AppLocaleManager.localeOf(localeCode);
					Map<String, String> localeUsers = (Map<String, String>) params.get(key);
					if (localeUsers != null) {
						String[] users = localeUsers.get("users").split(",");
						for (String user : users) {
							userLocales.put(user, locale);
						}
					}
				} else if (key.startsWith(timezonePrefix) && key.length() > timezonePrefixLen) {
					Map<String, String> timezoneUsers = (Map<String, String>) params.get(key);
					String timezoneId = timezoneUsers.get("id");
					TimeZone timezone = TimeZone.getTimeZone(timezoneId);
					if (timezoneUsers != null) {
						String[] users = timezoneUsers.get("users").split(",");
						for (String user : users) {
							userTimezones.put(user, timezone);
						}
					}
				}
			}
		}
		
		Map<String, TreeSet<String>> usrRights = new HashMap<String, TreeSet<String>>();
		for (String grpName : groupUsers.keySet()) {
			String[] grpUsers = groupUsers.get(grpName);
			String[] grpRights = groupRights.get(grpName);
			for (String usrName : grpUsers) {
				TreeSet<String> grps = userGroups.get(usrName);
				if (grps == null) {
					grps = new TreeSet<String>();
					userGroups.put(usrName, grps);
				}
				grps.add(grpName);
				
				if (grpRights != null) {
					TreeSet<String> uRights = usrRights.get(usrName);
					if (uRights == null) {
						uRights = new TreeSet<String>();
						usrRights.put(usrName, uRights);
					}
					for (String r : grpRights) uRights.add(r);
				}
			}
		}
		for (String usrName : usrRights.keySet()) {
			String[] uRightsAry = new String[usrRights.get(usrName).size()];
			usrRights.get(usrName).toArray(uRightsAry);
			userRights.put(usrName, uRightsAry);
		}
		if (logger.isDebugEnabled()) {
			StringBuilder bldr = new StringBuilder();
			bldr.append("initialized with users:\n");
			for (String userName : users.keySet()) {
				bldr.append(userName)
					.append("[")
					.append(Arrays.toString(userRights.get(userName)))
					.append("]\n");
			}
			logger.debug(bldr.toString());
		}
	}
	
	@Override
	public User findUser(String userKey) throws AppException {
		String pwd = users.get(userKey);
		if (pwd != null) {
			User user = new User(userKey);
			user.setCredentials(pwd);
			user.setMobile(userMobile.get(userKey));
			user.setEmail(userEmail.get(userKey));
			user.setLocale(userLocales.get(userKey));
			user.setTimezone(userTimezones.get(userKey));
			user.setStatus(SecurityStatus.ENABLED);
			return user;
		}
		for (User user : autogeneratedUsers) {
			if (user.getName().equals(userKey)) {
				return user;
			}
		}
		throw new AppException("message.error.authen.user-not-found");
	}
	
	@Override
	public HashSet<String> findUserRights(String userKey) throws AppException {
		HashSet<String> rights = new HashSet<String>();
		for (String right : userRights.get(userKey)) rights.add(right);
		return rights;
	}

	@Override
	public List<Date> findHolidays(String countryCode, int year) throws AppException {
		List<Date> dates = new ArrayList<Date>();
		Date date = Dates.getFirstDayOfYear(year);
		while (Dates.getYear(date) == year) {
			if (Dates.isWeekend(date)) dates.add(date);
			date = Dates.addDays(date, 1);
		}
		return dates;
	}

	@Override
	public List<Note> findNotes(SearchCriteria<Note> searchCriteria) throws AppException {
		List<Note> notes = new ArrayList<Note>();
		Note note = new Note();
		note.setContent("Testing 1");
		note.setNoteTo("1");
		note.setNoteTime(Apps.a.l_timestamp.in.GMT().value());
		notes.add(note);
		note = new Note();
		note.setContent("Testing 2");
		note.setNoteTo("1");
		note.setNoteTime(Apps.a.l_timestamp.in.GMT().value());
		return notes;
	}
	
	@Override
	public Note leaveNote(Note note) throws AppException {
		note.setNoteFrom("GUEST");
		note.setEventCode("manual-note");
		note.setNoteTime(Apps.a.l_timestamp.in.GMT().value());
		return note;
	}
	
	@Override
	public void afterSignon(User user, Map<String, Object> moreProps) throws AppException {
		if (logger.isDebugEnabled()) logger.debug("After user - " + user.loginame() + " signs on.");
	}
	
	@Override
	public void failedSignon(String userKey, SecurityStatus failedStatus) throws AppException {
		if (logger.isDebugEnabled()) logger.debug("After user - " + userKey + " failed signing on.");
	}

	@Override
	public User updateUserDetails(User details) throws AppException {
		return details;
	}

	@Override
	public User changePassword(User user, String password) throws AppException {
		user.setCredentials(password);
		return user;
	}

	@Override
	public User changeMobile(User user, String mobile) throws AppException {
		user.setMobile(mobile);
		return user;
	}

	@Override
	public User changeEmail(User user, String email) throws AppException {
		user.setEmail(email);
		return user;
	}

}
